import { LockFileData, PackageDependency, PackageVersions } from './lock-file-type';
import { ProjectGraph } from '../config/project-graph';
/**
 * Simple sort function to ensure keys are ordered alphabetically
 * @param obj
 * @returns
 */
export declare function sortObject<T = string>(obj: Record<string, T>, valueTransformator?: (value: T) => any, descending?: boolean, sortFunction?: (a: string, b: string) => number): Record<string, T> | undefined;
/**
 * Apply simple hashing of the content using the default hashing implementation
 * @param fileContent
 * @returns
 */
export declare function hashString(fileContent: string): string;
export declare function isRootVersion(packageName: string, version: string): boolean;
/**
 * Returns node name depending whether it's root version or nested
 */
export declare function getNodeName(dep: string, version: string, rootVersion: boolean): `npm:${string}`;
export declare type TransitiveLookupFunctionInput = {
    packageName: string;
    parentPackages: string[];
    versions: PackageVersions;
    version: string;
};
declare type TransitiveLookupFunction = (data: TransitiveLookupFunctionInput) => PackageDependency;
export declare function mapExternalNodes(lockFileData: LockFileData, transitiveLookupFn: TransitiveLookupFunction): ProjectGraph<any>;
export declare function hashExternalNodes(projectGraph: ProjectGraph): void;
/**
 * Generate new hash based on the original hash and pruning input parameters - packages and project name
 * @param originalHash
 * @param packages
 * @param projectName
 * @returns
 */
export declare function generatePrunnedHash(originalHash: string, packages: string[], projectName?: string): string;
export {};
